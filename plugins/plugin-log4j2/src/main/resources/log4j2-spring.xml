<?xml version="1.0" encoding="UTF-8"?>
<!-- 设置 log4j2 的自身 log 级别为 WARN -->
<!-- 日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!-- Configuration 后面的 status，设置 log4j2 自身内部的信息输出，可以不设置，trace 时会看到 log4j2 内部各种详细输出 -->
<!-- monitorInterval: Log4j 能够自动检测修改配置 文件和重新配置本身，设置间隔秒数 -->
<configuration status="DEBUG" monitorInterval="60">

  <!--变量配置-->
  <Properties>
    <!-- [%date]日期，[%thread] 线程名，[%-5level] 级别从左显示5个字符宽度，%msg 日志消息，-->
    <!-- %n 换行符，%logger{36} 表示 Logger 名字最长36个字符 -->
    <!-- [%thread] -->
    <property name="LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] [%X{TraceId}] [%thread] %logger{36} - %msg%xEx%n"/>
    <!--  ${sys:user.dir:-default} -->
    <!-- 变量 sys - System Properties -->
    <!-- 变量 env - System environment variables -->
    <!-- 变量 ctx - Thread Context Map (MDC) -->
    <!-- 定义日志存储的路径 -->
    <property name="BASE_DIR" value="${sys:user.dir}/logger"/>
  </Properties>

  <appenders>
    <!-- 控制台输出配置 -->
    <console name="Console" target="SYSTEM_OUT">
      <PatternLayout pattern="${LOG_PATTERN}"/>
      <!-- 只输出 level 及其以上级别的信息（onMatch），其它直接拒绝（onMismatch）-->
      <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
    </console>

    <!-- RollingRandomAccessFileAppender (RollingRandomAccessFile) with 20-200% performance improvement
          compared to RollingFileAppender(RollingFile) with "bufferedIO=true" -->

    <!-- 打印出 >= DEBUG 级别的信息，每次大小超过 size，则这 size 大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
    <RollingRandomAccessFile name="RollingFileAll" fileName="${BASE_DIR}/${date:yyyyMMdd}/rolling-file-all.log"
                             filePattern="${BASE_DIR}/${date:yyyyMMdd}/all/rolling-file-all-%d{yyyyMMdd}-%i.log.gz">
      <PatternLayout pattern="${LOG_PATTERN}"/>
      <Filters>
        <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
      </Filters>
      <Policies>
        <!-- interval, integer 型，指定两次封存动作之间的时间间隔 -->
        <!-- 需要和 filePattern 结合使用，日期格式精确到哪一位，interval 也精确到哪一个单位 -->
        <!-- %d{yyyy-MM-dd HH-mm-ss}-%i，最小的时间粒度是 ss，即秒钟 -->
        <!-- modulate, boolean型，说明是否对封存时间进行调制 -->
        <!-- modulate=true， 则封存时间将以 0 点为边界进行偏移计算。如: modulate=true，interval=4hours，
            那么假设上次封存日志的时间为03:00，则下次封存日志的时间为 04:00， 之后的封存时间依次为 08:00，12:00，16:00 -->
        <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
        <SizeBasedTriggeringPolicy size="100 MB"/>
        <!--<CronTriggeringPolicy schedule="0 0/1 * * * ?"/>-->
      </Policies>
      <!-- Seconds(0-59) Minutes(0-59) Hours(0-23) Day-of-mouth(1-31) Mount(1-11) Day-of-week(1-7) Year(Optional) -->
      <!--<CronTriggeringPolicy schedule="0/10 * * * * ?"/>-->
      <!-- DefaultRolloverStrategy 属性如不设置，则默认为最多同一文件夹下 7 个文件开始覆盖 -->
      <DefaultRolloverStrategy max="40">
        <!-- testMode=true，实际的文件不会被删除，打印删除日志 -->
        <Delete basePath="${BASE_DIR}" maxDepth="1">
          <!-- IfFileName: 匹配文件名称，glob: 匹配 2 级目录深度下的以 .log.gz 结尾的备份文件 -->
          <IfFileName glob="*/rolling-file-all-*.log.gz"/>
          <!-- P30D - 30 天， "D", "H", "M" and "S" for days, hours, minutes and seconds -->
          <IfLastModified age="P7D"/>
        </Delete>
      </DefaultRolloverStrategy>
    </RollingRandomAccessFile>

    <!-- 打印出 debug 级别的信息，每次大小超过 size，则这 size 大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
    <RollingRandomAccessFile name="RollingFileDebug" fileName="${BASE_DIR}/${date:yyyyMMdd}/rolling-file-debug.log"
                             filePattern="${BASE_DIR}/${date:yyyyMMdd}/debug/rolling-file-debug-%d{yyyyMMdd}-%i.log.gz">
      <PatternLayout pattern="${LOG_PATTERN}"/>
      <Filters>
        <!-- 过滤条件有三个值：ACCEPT(接受)，DENY(拒绝)，NEUTRAL(中立) -->
        <!-- NEUTRAL 表示交给下个 Filter 处理， onMatch 配置 level 及其以上，onMismatch level 及其以下 -->
        <ThresholdFilter level="DEBUG" onMatch="NEUTRAL" onMismatch="DENY"/>
        <ThresholdFilter level="INFO" onMatch="DENY" onMismatch="NEUTRAL"/>
      </Filters>
      <Policies>
        <!-- interval, integer 型，指定两次封存动作之间的时间间隔 -->
        <!-- 需要和 filePattern 结合使用，日期格式精确到哪一位，interval 也精确到哪一个单位 -->
        <!-- %d{yyyy-MM-dd HH-mm-ss}-%i，最小的时间粒度是 ss，即秒钟 -->
        <!-- modulate, boolean型，说明是否对封存时间进行调制 -->
        <!-- modulate=true， 则封存时间将以 0 点为边界进行偏移计算。如: modulate=true，interval=4hours，
            那么假设上次封存日志的时间为03:00，则下次封存日志的时间为 04:00， 之后的封存时间依次为 08:00，12:00，16:00 -->
        <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
        <SizeBasedTriggeringPolicy size="100 MB"/>
        <!--<CronTriggeringPolicy schedule="0 0/1 * * * ?"/>-->
      </Policies>
      <!-- DefaultRolloverStrategy 属性如不设置，则默认为最多同一文件夹下 7 个文件开始覆盖 -->
      <DefaultRolloverStrategy max="40">
        <Delete basePath="${BASE_DIR}" maxDepth="1">
          <!-- IfFileName: 匹配文件名称 glob: 匹配2级目录深度下的以 .log.gz 结尾的备份文件 -->
          <IfFileName glob="*/rolling-file-debug-*.log.gz"/>
          <!-- P30D - 30 天， "D", "H", "M" and "S" for days, hours, minutes and seconds -->
          <IfLastModified age="P7D"/>
        </Delete>
      </DefaultRolloverStrategy>
    </RollingRandomAccessFile>

    <!-- 打印出 info 级别的信息，每次大小超过 size，则这 size 大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
    <RollingRandomAccessFile name="RollingFileInfo" fileName="${BASE_DIR}/${date:yyyyMMdd}/rolling-file-info.log"
                             filePattern="${BASE_DIR}/${date:yyyyMMdd}/info/rolling-file-info-%d{yyyyMMdd}-%i.log.gz">
      <PatternLayout pattern="${LOG_PATTERN}"/>
      <Filters>
        <!-- 过滤条件有三个值：ACCEPT(接受)，DENY(拒绝)，NEUTRAL(中立)-->
        <!-- onMatch="ACCEPT" 匹配该级别及以上级别; onMismatch="DENY" 不匹配该级别以下的级别; >= INFO -->
        <!-- onMatch="DENY" 不匹配该级别及以上级别; onMismatch="ACCEPT" 匹配该级别以下的级别; < WARN -->
        <ThresholdFilter level="INFO" onMatch="NEUTRAL" onMismatch="DENY"/>
        <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
      </Filters>
      <Policies>
        <!-- interval, integer 型，指定两次封存动作之间的时间间隔 -->
        <!-- 需要和 filePattern 结合使用，日期格式精确到哪一位，interval 也精确到哪一个单位 -->
        <!-- %d{yyyy-MM-dd HH-mm-ss}-%i，最小的时间粒度是 ss，即秒钟 -->
        <!-- modulate, boolean型，说明是否对封存时间进行调制 -->
        <!-- modulate=true， 则封存时间将以 0 点为边界进行偏移计算。如: modulate=true，interval=4hours，
            那么假设上次封存日志的时间为03:00，则下次封存日志的时间为 04:00， 之后的封存时间依次为 08:00，12:00，16:00 -->
        <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
        <SizeBasedTriggeringPolicy size="100 MB"/>
        <!--<CronTriggeringPolicy schedule="0 0/1 * * * ?"/>-->
      </Policies>
      <!-- DefaultRolloverStrategy 属性如不设置，则默认为最多同一文件夹下 7 个文件开始覆盖 -->
      <DefaultRolloverStrategy max="40">
        <Delete basePath="${BASE_DIR}" maxDepth="1">
          <!-- IfFileName: 匹配文件名称 glob: 匹配2级目录深度下的以 .log.gz 结尾的备份文件 -->
          <IfFileName glob="*/rolling-file-info-*.log.gz"/>
          <!-- P30D - 30 天， "D", "H", "M" and "S" for days, hours, minutes and seconds -->
          <IfLastModified age="P7D"/>
        </Delete>
      </DefaultRolloverStrategy>
    </RollingRandomAccessFile>

    <!-- 打印 warn 级别的信息，每次大小超过 size，则这 size 大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
    <RollingRandomAccessFile name="RollingFileWarn" fileName="${BASE_DIR}/${date:yyyyMMdd}/rolling-file-warn.log"
                             filePattern="${BASE_DIR}/${date:yyyyMMdd}/warn/rolling-file-warn-%d{yyyyMMdd}-%i.log.gz">
      <PatternLayout pattern="${LOG_PATTERN}"/>
      <Filters>
        <!-- 过滤条件有三个值：ACCEPT(接受)，DENY(拒绝)，NEUTRAL(中立) -->
        <ThresholdFilter level="WARN" onMatch="NEUTRAL" onMismatch="DENY"/>
        <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
      </Filters>
      <Policies>
        <!-- interval属性用来指定多久滚动一次，默认是 1 hour -->
        <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
        <SizeBasedTriggeringPolicy size="100 MB"/>
        <!--<CronTriggeringPolicy schedule="0 0/1 * * * ?"/>-->
      </Policies>
      <!-- DefaultRolloverStrategy 属性如不设置，则默认为最多同一文件夹下 7 个文件，这里设置了 20 -->
      <DefaultRolloverStrategy max="40">
        <Delete basePath="${BASE_DIR}" maxDepth="1">
          <!-- IfFileName: 匹配文件名称 -->
          <!-- glob: 匹配2级目录深度下的以 .log.gz 结尾的备份文件 -->
          <IfFileName glob="*/rolling-file-warn-*.log.gz"/>
          <!-- P30D - 30 天， "D", "H", "M" and "S" for days, hours, minutes and seconds -->
          <IfLastModified age="P7D"/>
        </Delete>
      </DefaultRolloverStrategy>
    </RollingRandomAccessFile>

    <!-- 打印 error 级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
    <RollingRandomAccessFile name="RollingFileError" fileName="${BASE_DIR}/${date:yyyyMMdd}/rolling-file-error.log"
                             filePattern="${BASE_DIR}/${date:yyyyMMdd}/error/rolling-file-error-%d{yyyyMMdd}-%i.log.gz">
      <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
      <PatternLayout pattern="${LOG_PATTERN}"/>
      <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
      <Policies>
        <!-- interval 属性用来指定多久滚动一次，默认是 1 hour-->
        <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
        <SizeBasedTriggeringPolicy size="100 MB"/>
        <!--<CronTriggeringPolicy schedule="0 0/1 * * * ?"/>-->
      </Policies>
      <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
      <DefaultRolloverStrategy max="40">
        <Delete basePath="${BASE_DIR}" maxDepth="1">
          <!-- IfFileName: 匹配文件名称 -->
          <!-- glob: 匹配2级目录深度下的以 .log.gz 结尾的备份文件 -->
          <IfFileName glob="*/rolling-file-error-*.log.gz"/>
          <!-- P30D - 30 天， "D", "H", "M" and "S" for days, hours, minutes and seconds -->
          <IfLastModified age="P7D"/>
        </Delete>
      </DefaultRolloverStrategy>
    </RollingRandomAccessFile>

    <!-- 异步日志配置 -->
    <Async name="Async">
      <AppenderRef ref="RollingFileAll"/>
    </Async>
  </appenders>

  <!-- Logger 节点用来单独指定日志的形式，比如要为指定包下的 class 指定不同的日志级别等 -->
  <!-- 定义 logger，只有定义了 logger 并引入 appender，appender 才会生效-->
  <Loggers>
    <!-- 若是 additivity 设为 false，则子 Logger 只会在自己的 appender 里输出，而不会在父 Logger 的 appender 里输出 -->
    <!-- org.springframework | org.mybatis -->
    <Logger name="org.springframework" level="DEBUG" additivity="false">
      <AppenderRef ref="Async"/>
    </Logger>

    <Logger name="org.springframework" level="INFO" additivity="false">
      <AppenderRef ref="Console"/>
    </Logger>

    <Logger name="com.zaxxer.hikari.pool.HikariPool" additivity="false">
      <AppenderRef ref="Async"/>
    </Logger>
    <Logger name="org.redisson.connection.DNSMonitor" level="INFO"/>
    <Logger name="io.lettuce.core" level="INFO"/>
    <Logger name="org.apache.http.impl.conn" level="INFO"/>
    <Logger name="org.thymeleaf" level="INFO"/>

    <!-- 异步日志配置 -->
    <!--<AsyncLogger name="org.springframework" level="trace" includeLocation="true">
      <AppenderRef ref="RollingFileAll"/>
    </AsyncLogger>-->

    <Root level="DEBUG">
      <AppenderRef ref="Console"/>
      <AppenderRef ref="RollingFileDebug"/>
      <AppenderRef ref="RollingFileInfo"/>
      <AppenderRef ref="RollingFileWarn"/>
      <AppenderRef ref="RollingFileError"/>
      <!-- 异步日志配置 -->
      <AppenderRef ref="Async"/>
    </Root>
  </Loggers>
</configuration>