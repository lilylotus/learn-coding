plugins {
    id 'org.springframework.boot' version '2.4.13'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'idea'
}

repositories {
    maven { url 'https://maven.aliyun.com/repository/public/' }
    maven { url 'https://maven.aliyun.com/repository/spring/' }
    mavenCentral()
}

dependencies {

}

allprojects {

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'

    group 'cn.nihility'

    sourceCompatibility = 1.8

    ext {
        set('springBootVersion', "2.4.13")
    }

    repositories {
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/repository/spring/' }
        mavenCentral()
    }

    dependencies {
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    /*dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.springframework.security:spring-security-bom:${springSecurityVersion}"
        }
    }*/

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    [compileJava,compileTestJava,javadoc]*.options*.encoding = 'UTF-8'

    test {
        useJUnitPlatform()
    }

}

task cleanAll(type: Delete, dependsOn: [clean]) {
    subprojects.forEach({
        /*println "[$it.name] : [$it.projectDir] : [$it.buildDir]"*/
        println "clean [$it.projectDir\\out]"
        delete "$it.projectDir\\out"
    })
}
