plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'java-library'
    id 'idea'
}

repositories {
    maven { url 'https://maven.aliyun.com/repository/public/' }
    maven { url 'https://maven.aliyun.com/repository/spring/' }
    mavenCentral()
}

dependencies {

}

allprojects {

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'java-library'

    group 'cn.nihility'
    sourceCompatibility = '1.8'

    ext {
        /*set('springBootVersion', "2.4.13")*/
    }

    repositories {
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/repository/spring/' }
        mavenCentral()
    }

    dependencies {
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

        testImplementation("org.junit.jupiter:junit-jupiter-api")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            /*mavenBom "org.springframework.security:spring-security-bom:${springSecurityVersion}"*/
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    [compileJava,compileTestJava,javadoc]*.options*.encoding = 'UTF-8'

    test {
        useJUnitPlatform()
    }

}

subprojects {

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }

        all*.exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
    }

    dependencies {
        //compileOnly 'org.projectlombok:lombok'
        //annotationProcessor 'org.projectlombok:lombok'
        //implementation("org.apache.commons:commons-lang3:${commonsLang3Version}")
    }

    // 依赖包打包时需要 jar 包
    jar {
        enabled(true)
    }

}

//task cleanAll(type: Delete, dependsOn: [clean]) {
//    subprojects.forEach({
//        /*println "[$it.name] : [$it.projectDir] : [$it.buildDir]"*/
//        println "clean [$it.projectDir\\out]"
//        delete "$it.projectDir\\out"
//    })
//}
