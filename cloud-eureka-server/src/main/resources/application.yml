server:
  port: 8761

spring:
  # Spring Cloud Ribbon 处于维护阶段
  cloud:
    loadbalancer:
      ribbon:
        enabled: false
  security:
    user:
      name: 'admin'
      password: 'admin'

eureka:
  instance:
    hostname: localhost
    # 是否优先使用 ip 来作为主机名, 负责发现获取的 host 就为 IP 地址，不是 host (注册的名称)
    preferIpAddress: false
    # 默认 90s. 服务过期时间配置,超过这个时间没有接收到心跳 EurekaServer 就会将这个实例剔除.
    # 注意，EurekaServer 一定要设置 eureka.server.eviction-interval-timer-in-ms 否则这个配置无效，这个配置一般为服务刷新时间配置的三倍
    lease-expiration-duration-in-seconds: 15
    # 默认 30s. 服务刷新时间配置，每隔这个时间会主动心跳一次
    lease-renewal-interval-in-seconds: 5
    # 使用 security 安全
    #metadata-map:
    #  user.name: ${spring.security.user.name}
    #  user.password: ${spring.security.user.password}
  server:
    # 关闭自我保护模式。自我保护模式是指，出现网络分区、eureka 在短时间内丢失过多客户端时，会进入自我保护模式。
    # 自我保护：一个服务长时间没有发送心跳包，eureka 也不会将其删除，默认为 true。
    enable-self-preservation: false
    # 在Eureka服务器获取不到集群里对等服务器上的实例时，需要等待的时间，单位为毫秒，默认为1000 * 60 * 5
    wait-time-in-ms-when-sync-empty: 0
    # 默认30s. eureka server 刷新 readCacheMap 的时间，注意 client 读取的是 readCacheMap
    # 这个时间决定了多久会把 readWriteCacheMap 的缓存更新到 readCacheMap 上
    response-cache-update-interval-ms: 3000
    # 默认 60s. 启用主动失效，并且每次主动失效检测间隔为 5s.
    eviction-interval-timer-in-ms: 5000
  client:
    # 注册成功后是否定期检查服务健康状况
    healthcheck:
      enabled: true
    # 是否从 eureka server 获取注册的服务列表, 单体 Server 本身不用注册
    fetchRegistry: false
    # eureka 是否自己注册到 server 端，单体 server 可以不用注册
    registerWithEureka: false
    serviceUrl:
      # 默认的 url : http://localhost:8761/eureka/，配置了安全时 http://user:password@127.0.0.1:8761/eureka/
      defaultZone: http://localhost:8761/eureka/

management:
  endpoints:
    web:
      exposure:
        # "*" 表示包含所有 ["health","info","metrics","prometheus"]
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging:
  level:
    root: info
    com.netflix.discovery: debug
